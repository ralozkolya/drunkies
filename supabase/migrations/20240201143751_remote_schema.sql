
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE SCHEMA IF NOT EXISTS "supabase_migrations";

ALTER SCHEMA "supabase_migrations" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."icon" AS ENUM (
    'beer-mug-empty',
    'martini-glass-citrus',
    'whiskey-glass',
    'wine-glass',
    'glass-water',
    'bottle-droplet'
);

ALTER TYPE "public"."icon" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."log" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "alcohol" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "volume" smallint NOT NULL,
    "user_id" uuid DEFAULT auth.uid(),
    "icon" public.icon
);

ALTER TABLE "public"."log" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."detailed_log" AS
 SELECT log.id,
    log.name,
    log.alcohol,
    log.created_at,
    log.volume,
    log.user_id,
    log.icon
   FROM public.log
  WHERE (log.user_id = auth.uid())
  ORDER BY log.created_at DESC, log.id DESC;

ALTER TABLE "public"."detailed_log" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."drinks" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "alcohol" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "volume" smallint NOT NULL,
    "user_id" uuid DEFAULT auth.uid(),
    "icon" public.icon
);

ALTER TABLE "public"."drinks" OWNER TO "postgres";

ALTER TABLE "public"."drinks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."drinks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."grouped_log" AS
 SELECT log.user_id,
    log.name,
    sum(log.volume) AS volume,
    sum(((log.volume * log.alcohol) / 100)) AS alcohol
   FROM public.log
  GROUP BY log.user_id, log.name
  ORDER BY log.user_id;

ALTER TABLE "public"."grouped_log" OWNER TO "postgres";

ALTER TABLE "public"."log" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."log_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "supabase_migrations"."schema_migrations" (
    "version" text NOT NULL,
    "statements" text[],
    "name" text
);

ALTER TABLE "supabase_migrations"."schema_migrations" OWNER TO "postgres";

ALTER TABLE ONLY "public"."drinks"
    ADD CONSTRAINT "drinks_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."log"
    ADD CONSTRAINT "log_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "supabase_migrations"."schema_migrations"
    ADD CONSTRAINT "schema_migrations_pkey" PRIMARY KEY ("version");

CREATE POLICY "Enable access to own and public drinks" ON "public"."drinks" FOR SELECT USING (((auth.uid() = user_id) OR (user_id IS NULL)));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."log" FOR DELETE USING ((auth.uid() = user_id));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."drinks" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."log" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."log" FOR SELECT USING (true);

ALTER TABLE "public"."drinks" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."log" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."log" TO "anon";
GRANT ALL ON TABLE "public"."log" TO "authenticated";
GRANT ALL ON TABLE "public"."log" TO "service_role";

GRANT ALL ON TABLE "public"."detailed_log" TO "anon";
GRANT ALL ON TABLE "public"."detailed_log" TO "authenticated";
GRANT ALL ON TABLE "public"."detailed_log" TO "service_role";

GRANT ALL ON TABLE "public"."drinks" TO "anon";
GRANT ALL ON TABLE "public"."drinks" TO "authenticated";
GRANT ALL ON TABLE "public"."drinks" TO "service_role";

GRANT ALL ON SEQUENCE "public"."drinks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."drinks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."drinks_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."grouped_log" TO "anon";
GRANT ALL ON TABLE "public"."grouped_log" TO "authenticated";
GRANT ALL ON TABLE "public"."grouped_log" TO "service_role";

GRANT ALL ON SEQUENCE "public"."log_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."log_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."log_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
